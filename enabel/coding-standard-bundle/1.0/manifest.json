{
    "bundles": {
        "Enabel\\CodingStandardBundle\\EnabelCodingStandardBundle": [
            "all"
        ]
    },
    "copy-from-recipe": {
        "docker/": "docker/"
    },
    "env": {
        "NODE_VERSION": "16",
        "MYSQL_VERSION": "8",
        "PHP_VERSION": "8.1",
        "DATABASE_URL": "mysql://app:!ChangeMe!@127.0.0.1:3306/app?serverVersion=${MYSQL_VERSION}&charset=utf8mb4"
    },
    "gitignore": [
        "/%PUBLIC_DIR%/coverage/",
        "/symfony",
        "/__symfony_bak__",
        "!/docker/db/data/.gitignore",
        "!/docker/redis/data/.gitignore",
        "!/docker/redis/insight/.gitignore"
    ],
    "docker-compose": {
        "docker-compose.yml": {
            "services": [
                "database:",
                "  image: mysql:${MYSQL_VERSION:-8}-oracle",
                "  environment:",
                "    MYSQL_DATABASE: ${MYSQL_DATABASE:-app}",
                "    # You should definitely change the password in production",
                "    MYSQL_PASSWORD: ${MYSQL_PASSWORD:-!ChangeMe!}",
                "    MYSQL_ALLOW_EMPTY_PASSWORD: \"yes\"",
                "  volumes:",
                "    - ./docker/db/data:/var/lib/mysql:rw"
            ]
        },
        "docker-compose.override.yml": {
            "services": [
                "database:",
                "  ports:",
                "    - \"3306\"",
                "  healthcheck:",
                "    test: [ \"CMD\", \"mysqladmin\" ,\"ping\", \"-h\", \"localhost\" ]",
                "    timeout: 20s",
                "    retries: 10",
                "",
                "phpmyadmin:",
                "  image: phpmyadmin/phpmyadmin",
                "  ports:",
                "    - \"8080:80\"",
                "  depends_on:",
                "    - database",
                "  environment:",
                "    PMA_HOST: database",
                "    PMA_USER: root",
                "",
                "phpqa:",
                "  image: jakzal/phpqa:php${PHP_VERSION:-8.1}",
                "  working_dir: /project",
                "  user: \"${USER_ID:-1000}:${GROUP_ID:-1000}\"",
                "  volumes:",
                "    - ./:/project",
                "",
                "node:",
                "  image: node:${NODE_VERSION:-16}",
                "  privileged: true",
                "  working_dir: /project",
                "  volumes:",
                "    - ./:/project",
                "  ports:",
                "    - 8888:8080",
                "",
                "redis:",
                "  image: redis",
                "  volumes:",
                "    - ./docker/redis/data:/data",
                "  ports:",
                "    - \"6379\"",
                "  healthcheck:",
                "    test: [\"CMD\", \"redis-cli\" ,\"ping\"]",
                "    timeout: 10s",
                "    retries: 10",
                "",
                "redisinsight:",
                "  image: redislabs/redisinsight",
                "  ports:",
                "    - 8001:8001",
                "  depends_on:",
                "    - redis",
                "  volumes:",
                "    - ./docker/redis/insight:/db:rw"
            ]
        }
    },
    "makefile": [
        "# Setup ————————————————————————————————————————————————————————————————————————",
        "# Target OS detection",
        "ifeq ($(OS),Windows_NT)",
        "\t# Config & environment variable on Windows",
        "\tSHELL\t\t\t= powershell -NoProfile",
        "\tDIR_SEPARATOR\t= \\\\",
        "\tSYMFONY_BIN\t\t= symfony.exe",
        "\tDOCKER\t\t\t= docker",
        "\tPURGE_CMD\t\t= cmd /c rmdir /Q /S",
        "else",
        "\tifeq ($(shell uname -s),Linux)",
        "\t\t# Config & environment variable on Linux",
        "\t\tSHELL\t\t\t= bash",
        "\t\tDIR_SEPARATOR\t= /",
        "\t\tUSER\t\t\t= $(shell id -u)",
        "\t\tGROUP\t\t\t= $(shell id -g)",
        "\t\tSYMFONY_BIN\t\t= symfony",
        "\t\tDOCKER_ENV\t\t= USER_ID=$(USER) GROUP_ID=$(GROUP)",
        "\t\tDOCKER\t\t\t= $(DOCKER_ENV) docker",
        "\t\tPURGE_CMD\t\t= sudo rm -Rf",
        "\telse",
        "\t\t$(error OS not supported by this Makefile)",
        "\tendif",
        "endif",
        "\n",
        "DOCKER_COMP\t\t= $(DOCKER) compose",
        "PHP\t\t\t\t= $(SYMFONY_BIN) php",
        "SYMFONY\t\t\t= $(SYMFONY_BIN) console",
        "COMPOSER\t\t= $(SYMFONY_BIN) composer",
        "PCOV\t\t\t= -dpcov.enabled=1 -dpcov.directory=. -dpcov.exclude=\"~vendor~\"",
        "PHPUNIT\t\t\t= XDEBUG_MODE=off $(PHP) $(PCOV) bin/phpunit -d memory_limit=-1 --stop-on-failure --testdox",
        "PHPUNIT_CI\t\t= XDEBUG_MODE=coverage $(PHP) bin/phpunit -d memory_limit=-1 --stop-on-failure --testdox",
        "PHPQA\t\t\t= $(DOCKER_COMP) run --rm phpqa",
        "YARN\t\t\t= $(DOCKER_COMP) run --rm node yarn",
        ".DEFAULT_GOAL\t= help",
        ".PHONY: $(filter-out vendor node_modules,$(MAKECMDGOALS))",
        "# Default arguments values ————————————————————————————————————————————————————",
        "env = dev",
        "\n",
        "## —— THE Symfony Makefile \uD83C\uDF7A ——————————————————————————————————————————————————",
        "help: ## Outputs this help screen",
        "\t@grep -E '(^[a-zA-Z0-9_-]+:.*?##.*$$)|(^##)' $(MAKEFILE_LIST) | awk 'BEGIN {FS = \":.*?## \"}{printf \"\\033[32m%-30s\\033[0m %s\\n\", $$1, $$2}' | sed -e 's/\\[32m##/[33m/'\n",
        "\n",
        ""
    ]

}
